1. 合并两个有序链表

https://leetcode-cn.com/problems/merge-two-sorted-lists/

将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

""" 一、迭代法"""
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        l3head = ListNode(None)
        l3 = l3head
        while(l1 and l2):
            if (l1.val<=l2.val):
                l3.next = l1
                l3 = l3.next
                l1 = l1.next
            else :
                l3.next = l2
                l3 = l3.next
                l2 = l2.next
        if l1 is not None:
            l3.next = l1 
        else :
            l3.next = l2
        return l3head.next
"""
复杂度分析:
时间复杂度：O(n + m)O(n+m) 。因为每次循环迭代中，l1 和 l2 只有一个元素会被放进合并链表中， while 循环的次数等于两个链表的总长度。所有其他工作都是常数级别的，所以总的时间复杂度是线性的。
空间复杂度：O(1)O(1) 。迭代的过程只会产生几个指针，所以它所需要的空间是常数级别的。
"""

"""二、递归法："""
# class Solution:
#     def mergeTwoLists(self, l1, l2):
#         if l1 is None:
#             return l2
#         elif l2 is None:
#             return l1
#         elif l1.val < l2.val:
#             l1.next = self.mergeTwoLists(l1.next, l2)
#             return l1
#         else:
#             l2.next = self.mergeTwoLists(l1, l2.next)
#             return l2
"""
复杂度分析：
时间复杂度：O(n + m)O(n+m)。 因为每次调用递归都会去掉 l1 或者 l2 的头元素（直到至少有一个链表为空），函数 mergeTwoList 中只会遍历每个元素一次。所以，时间复杂度与合并后的链表长度为线性关系。

空间复杂度：O(n + m)O(n+m)。调用 mergeTwoLists 退出时 l1 和 l2 中每个元素都一定已经被遍历过了，所以 n + mn+m 个栈帧会消耗 O(n + m)O(n+m) 的空间。
"""

2. 删除链表的倒数第N个节点

https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/

给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。

示例：

给定一个链表: 1->2->3->4->5, 和 n = 2.

当删除了倒数第二个节点后，链表变为 1->2->3->5.
说明：

给定的 n 保证是有效的。

进阶：

你能尝试使用一趟扫描实现吗？
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        p1 = head
        p2 = head
        while(n>0):
            p2 = p2.next
            n-=1
        if(p2 is None): #这两行是处理特殊情况：n=链表长度
            return p1.next

        while(p2.next):
            p1 = p1.next
            p2 = p2.next
        p1.next = p1.next.next
        return head
"""        
解法：双指针，注意要处理特殊情况：n=链表长度即要删除第一个元素
时间复杂度：O（n），空间复杂度：O（1）
"""


3. 旋转链表

https://leetcode-cn.com/problems/rotate-list/

给定一个链表，旋转链表，将链表每个节点向右移动k个位置，其中k是非负数。

示例 1:

输入: 1->2->3->4->5->NULL, k = 2
输出: 4->5->1->2->3->NULL

解释:
向右旋转 1 步: 5->1->2->3->4->NULL
向右旋转 2 步: 4->5->1->2->3->NULL
示例 2:

输入: 0->1->2->NULL, k = 4
输出: 2->0->1->NULL

解释:
向右旋转 1 步: 2->0->1->NULL
向右旋转 2 步: 1->2->0->NULL
向右旋转 3 步: 0->1->2->NULL
向右旋转 4 步: 2->0->1->NULL

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

#自己的解法，用了双指针
# class Solution:
#     def rotateRight(self, head: ListNode, k: int) -> ListNode:
#         k1 = k
#         n = 1
#         p1 = head
#         p2 = head
#         lian = ListNode(-1)
#         if(p2 is None):#链表为空的特殊情况
#             return None

#         while(k>0):
#             if(p2.next is None):#当k>n时，必须要用余数来做，否则会超时，因为测试集中有k超级大的情况
#                 p2 = head
#                 while(k1%n > 0):
#                     print("k1=",k1,"  n=",n,"  k1%n=",k1%n)
#                     p2 = p2.next 
#                     k1-=1
#                 break
#             else: #当k<n时，用双指针可以做到只遍历一次
#                 p2 = p2.next
#                 n+=1
#             k-=1

#         while(p2.next):
#             p1 = p1.next
#             p2 = p2.next
#         p2.next = head
#         lian = p1.next
#         p1.next = None
#         return lian

"""
时间复杂度：O(N)，其中 N 是链表中的元素个数
空间复杂度：O(1)，因为只需要常数的空间
"""

#LeetCode答案：
class Solution:
    def rotateRight(self, head: 'ListNode', k: 'int') -> 'ListNode':
        # 处理链表为空的特殊情况
        if not head:
            return None
        
        # 闭合成环并计数链表长度
        old_tail = head
        n = 1
        while old_tail.next:
            old_tail = old_tail.next
            n += 1
        old_tail.next = head
        
        # find new tail : (n - k % n - 1)th node
        # and new head : (n - k % n)th node
        new_tail = head
        for i in range(n - k % n - 1):
            new_tail = new_tail.next
        new_head = new_tail.next
        
        # break the ring
        new_tail.next = None
        
        return new_head
"""
时间复杂度：O(N)，其中 N 是链表中的元素个数
空间复杂度：O(1)，因为只需要常数的空间
"""
