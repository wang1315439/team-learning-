@操作
	错误提示：
	psql: could not connect to server: No such file or directory
	 Is the server running locally and accepting
	 connections on Unix domain socket "/tmp/.s.PGSQL.5432"?
	出现该问题的很多，以下是目前碰到的几种情况，之后碰到继续补充：
	1.删除了/tmp路径中的.s.PGSQL.5432 与.s.PGSQL.5432.lock文件或其它端口的文件
	 解决：重启数据库 $sudo service postgresql restart
	






@基础：	
	一、【WITH】在 PostgreSQL 中，WITH 子句提供了一种编写辅助语句的方法，以便在更大的查询中使用。
		WITH 子句有助于将复杂的大型查询分解为更简单的表单，便于阅读。这些语句通常称为通用表表达式（Common Table Express， CTE），也可以当做一个为查询而存在的临时表。
		WITH 子句是在多次执行子查询时特别有用，允许我们在查询中通过它的名称(可能是多次)引用它。
		WITH 子句在使用前必须先定义。

		WITH 查询的基础语法如下：
		WITH
		   name_for_summary_data AS (
			  SELECT Statement)
		   SELECT columns
		   FROM name_for_summary_data
		   WHERE conditions <=> (
			  SELECT column
			  FROM name_for_summary_data)
		   [ORDER BY columns]

		具体示例：
		WITH moved_rows AS (
		   DELETE FROM COMPANY
		   WHERE
			  SALARY >= 30000
		   RETURNING *
		)
		INSERT INTO COMPANY1 (SELECT * FROM moved_rows)
		此时，相当于把COMPANY 中SALARY >= 30000的部分剪切到了COMPANY1中，CAMPANY 表和 CAMPANY1 表的数据如下：

		runoobdb=# SELECT * FROM COMPANY;
		 id | name  | age |  address   | salary
		----+-------+-----+------------+--------
		  1 | Paul  |  32 | California |  20000
		  2 | Allen |  25 | Texas      |  15000
		  3 | Teddy |  23 | Norway     |  20000
		  7 | James |  24 | Houston    |  10000
		(4 rows)


		runoobdb=# SELECT * FROM COMPANY1;
		 id | name  | age | address | salary
		----+-------+-----+-------------+--------
		  4 | Mark  |  25 | Rich-Mond   |  65000
		  5 | David |  27 | Texas       |  85000
		  6 | Kim   |  22 | South-Hall  |  45000
		(3 rows)

	二、【HAVING】HAVING 子句可以让我们筛选分组后的各组数据。
		WHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件。
		HAVING 子句必须放置于 GROUP BY 子句后面，ORDER BY 子句前面，下面是 HAVING 子句在 SELECT 语句中基础语法：
			SELECT column1, column2
			FROM table1, table2
			WHERE [ conditions ]
			GROUP BY column1, column2
			HAVING [ conditions ]
			ORDER BY column1, column2
		
		具体示例：
			下面实例将找出根据 name 字段值进行分组，并且名称的计数大于 1 数据：
				SELECT NAME FROM COMPANY GROUP BY name HAVING count(name) > 1;
			得到结果如下：
				 name
				-------
				 Paul
				 James
				(2 rows)

	三、【DISTINCT】我们平时在操作数据时，有可能出现一种情况，在一个表中有多个重复的记录，
		当提取这样的记录时，DISTINCT 关键字就显得特别有意义，它只获取唯一一次记录，而不是获取重复记录。
		用于去除重复记录的 DISTINCT 关键字的基本语法如下：
			SELECT DISTINCT column1, column2,.....columnN
			FROM table_name
			WHERE [condition]
		具体示例：
			SELECT DISTINCT name FROM COMPANY;
	
	
@高级：	
	一、【约束】如果存在违反约束的数据行为，行为会被约束终止。约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。
		约束确保了数据库中数据的准确性和可靠性。约束可以是列级或表级。列级约束仅适用于列，表级约束被应用到整个表。
		NOT NULL：指示某列不能存储 NULL 值。
		UNIQUE：确保某列的值都是唯一的。
		PRIMARY Key：NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。。
		FOREIGN Key： 保证一个表中的数据匹配另一个表中的值的参照完整性。
		CHECK： 保证列中的值符合指定的条件。
		EXCLUSION ：排他约束，保证如果将任何两行的指定列或表达式使用指定操作符进行比较，至少其中一个操作符比较将会返回 false 或空值。
		具体示例：
			NOT NULL 约束：
				CREATE TABLE COMPANY1(
				   ID INT PRIMARY KEY     NOT NULL,
				   NAME           TEXT    NOT NULL,
				   AGE            INT     NOT NULL,
				   ADDRESS        CHAR(50),
				   SALARY         REAL
				);
			UNIQUE 约束：
				CREATE TABLE COMPANY3(
				   ID INT PRIMARY KEY     NOT NULL,
				   NAME           TEXT    NOT NULL,
				   AGE            INT     NOT NULL UNIQUE,
				   ADDRESS        CHAR(50),
				   SALARY         REAL    DEFAULT 50000.00
				);
			PRIMARY KEY 约束:
				CREATE TABLE COMPANY4(
				   ID INT PRIMARY KEY     NOT NULL,
				   NAME           TEXT    NOT NULL,
				   AGE            INT     NOT NULL,
				   ADDRESS        CHAR(50),
				   SALARY         REAL
				);
			FOREIGN KEY 约束：EMP_ID 就是外键，参照 COMPANY6 的 ID：
				CREATE TABLE DEPARTMENT1(
				   ID INT PRIMARY KEY      NOT NULL,
				   DEPT           CHAR(50) NOT NULL,
				   EMP_ID         INT      references COMPANY6(ID)
				);
			CHECK 约束：CHECK 约束保证列中的所有值满足某一条件，即对输入一条记录要进行检查。如果条件值为 false，则记录违反了约束，且不能输入到表。
				CREATE TABLE COMPANY5(
				   ID INT PRIMARY KEY     NOT NULL,
				   NAME           TEXT    NOT NULL,
				   AGE            INT     NOT NULL,
				   ADDRESS        CHAR(50),
				   SALARY         REAL    CHECK(SALARY > 0)
				);
			EXCLUSION 约束：确保如果使用指定的运算符在指定列或表达式上比较任意两行，至少其中一个运算符比较将返回 false 或 null。
				CREATE TABLE COMPANY7(
				   ID INT PRIMARY KEY     NOT NULL,
				   NAME           TEXT,
				   AGE            INT  ,
				   ADDRESS        CHAR(50),
				   SALARY         REAL,
				   EXCLUDE USING gist
				   (NAME WITH =,  -- 如果满足 NAME 相同，AGE 不相同则不允许插入，否则允许插入
				   AGE WITH <>)   -- 其比较的结果是如果整个表边式返回 true，则不允许插入，否则允许
				);
				由于我们已经强制执行了年龄必须相同，让我们通过向表插入记录来查看这一点：
				INSERT INTO COMPANY7 VALUES(1, 'Paul', 32, 'California', 20000.00 );
				INSERT INTO COMPANY7 VALUES(2, 'Paul', 32, 'Texas', 20000.00 );  
				-- 此条数据的 NAME 与第一条相同，且 AGE 与第一条也相同，故满足插入条件
				INSERT INTO COMPANY7 VALUES(3, 'Allen', 42, 'California', 20000.00 );
				-- 此数据与上面数据的 NAME 相同，但 AGE 不相同，故不允许插入
	二、【连接(JOIN)】	在 PostgreSQL 中，JOIN 有五种连接类型：
		CROSS JOIN ：交叉连接
		INNER JOIN：内连接
		LEFT OUTER JOIN：左外连接
		RIGHT OUTER JOIN：右外连接
		FULL OUTER JOIN：全外连接	
		具体示例：
	

	三、【UNION】UNION 操作符用于合并两个或多个 SELECT 语句的结果集。
		请注意，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。同时，每个 SELECT 语句中的列的顺序必须相同。列也必须拥有相似的数据类型。	
		具体示例：
			SELECT EMP_ID, NAME, DEPT FROM COMPANY INNER JOIN DEPARTMENT
			   ON COMPANY.ID = DEPARTMENT.EMP_ID
			   UNION
			SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT
				ON COMPANY.ID = DEPARTMENT.EMP_ID;
		UNION ALL 操作符可以连接两个有重复行的 SELECT 语句，默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。
		具体示例：
			SELECT EMP_ID, NAME, DEPT FROM COMPANY INNER JOIN DEPARTMENT
			   ON COMPANY.ID = DEPARTMENT.EMP_ID
			   UNION ALL
			SELECT EMP_ID, NAME, DEPT FROM COMPANY LEFT OUTER JOIN DEPARTMENT
				ON COMPANY.ID = DEPARTMENT.EMP_ID;
		
	四、【NULL 值】在查询数据时，NULL 值可能会导致一些问题，因为一个未知的值去与其他任何值比较，结果永远是未知的。另外无法比较 NULL 和 0，因为它们是不等价的。	
		IS NULL 和 IS NOT NULL 的用法：
			SELECT  ID, NAME, AGE, ADDRESS, SALARY FROM COMPANY WHERE SALARY IS NOT NULL;
			SELECT  ID, NAME, AGE, ADDRESS, SALARY FROM COMPANY WHERE SALARY IS NULL;
		
	五、【别名】创建别名是为了让表名或列名的可读性更强。SQL 中 使用 AS 来创建别名。
		表的别名语法:
			SELECT column1, column2....
			FROM table_name AS alias_name
			WHERE [condition];
		下面我们分别用 C 和 D 表示 COMPANY 表和 DEPAERMENT 表的别名：
			SELECT C.ID, C.NAME, C.AGE, D.DEPT FROM COMPANY AS C, DEPARTMENT AS D WHERE  C.ID = D.EMP_ID;
		列的别名语法:
			SELECT column_name AS alias_name
			FROM table_name
			WHERE [condition];
		下面，我们用 COMPANY_ID 表示 ID 列，COMPANY_NAME 表示 NAME 列，来展示列别名的用法：
			SELECT C.ID AS COMPANY_ID, C.NAME AS COMPANY_NAME, C.AGE, D.DEPT  FROM COMPANY AS C, DEPARTMENT AS D WHERE  C.ID = D.EMP_ID;
	
	六、【触发器】触发器是数据库的回调函数，它会在指定的数据库事件发生时自动执行/调用。
		下面是关于 PostgreSQL 触发器几个比较重要的点：
			PostgreSQL 触发器可以在下面几种情况下触发：
				在执行操作之前（在检查约束并尝试插入、更新或删除之前）。
				在执行操作之后（在检查约束并插入、更新或删除完成之后）。
				更新操作（在对一个视图进行插入、更新、删除时）。
			触发器的 FOR EACH ROW 属性是可选的，如果选中，当操作修改时每行调用一次；相反，选中 FOR EACH STATEMENT，不管修改了多少行，每个语句标记的触发器执行一次。
			WHEN 子句和触发器操作在引用 NEW.column-name 和 OLD.column-name 表单插入、删除或更新时可以访问每一行元素。其中 column-name 是与触发器关联的表中的列的名称。
			如果存在 WHEN 子句，PostgreSQL 语句只会执行 WHEN 子句成立的那一行，如果没有 WHEN 子句，PostgreSQL 语句会在每一行执行。
			BEFORE 或 AFTER 关键字决定何时执行触发器动作，决定是在关联行的插入、修改或删除之前或者之后执行触发器动作。
			要修改的表必须存在于同一数据库中，作为触发器被附加的表或视图，且必须只使用 tablename，而不是 database.tablename。
			当创建约束触发器时会指定约束选项。这与常规触发器相同，只是可以使用这种约束来调整触发器触发的时间。当约束触发器实现的约束被违反时，它将抛出异常。
		创建触发器时的基础语法如下：
			CREATE  TRIGGER trigger_name [BEFORE|AFTER|INSTEAD OF] event_name
			ON table_name
			[
			 -- 触发器逻辑....
			];
		列出触发器：
			你可以把从 pg_trigger 表中把当前数据库所有触发器列举出来：
			runoobdb=# SELECT * FROM pg_trigger;
			如果，你想列举出特定表的触发器，语法如下：
			runoobdb=# SELECT tgname FROM pg_trigger, pg_class WHERE tgrelid=pg_class.oid AND relname='company';
		删除触发器基础语法如下：
			drop trigger ${trigger_name} on ${table_of_trigger_dependent};
			删除本文上表 company 上的触发器 example_trigger 的指令为：
			drop trigger example_trigger on company;
			
			
			
			
	七、【索引】索引有助于加快 SELECT 查询和 WHERE 子句，但它会减慢使用 UPDATE 和 INSERT 语句时的数据输入。
		你可以使用 \di 命令列出数据库中所有索引。
		单列索引
			单列索引是一个只基于表的一个列上创建的索引，基本语法如下：
			CREATE INDEX index_name
			ON table_name (column_name);
			示例：CREATE INDEX salary_index ON COMPANY (salary);
		组合索引
			组合索引是基于表的多列上创建的索引，基本语法如下：
			CREATE INDEX index_name
			ON table_name (column1_name, column2_name);
			不管是单列索引还是组合索引，该索引必须是在 WHEHE 子句的过滤条件中使用非常频繁的列。
			如果只有一列被使用到，就选择单列索引，如果有多列就使用组合索引。

		唯一索引
			使用唯一索引不仅是为了性能，同时也为了数据的完整性。唯一索引不允许任何重复的值插入到表中。基本语法如下：
			CREATE UNIQUE INDEX index_name
			on table_name (column_name);
		局部索引
			局部索引 是在表的子集上构建的索引；子集由一个条件表达式上定义。索引只包含满足条件的行。基础语法如下：
			CREATE INDEX index_name
			on table_name (conditional_expression);
		
		DROP INDEX （删除索引）：DROP INDEX index_name;
			示例：DROP INDEX salary_index;
		
		什么情况下要避免使用索引？虽然索引的目的在于提高数据库的性能，但这里有几个情况需要避免使用索引：
			索引不应该使用在较小的表上。
			索引不应该使用在有频繁的大批量的更新或插入操作的表上。
			索引不应该使用在含有大量的 NULL 值的列上。
			索引不应该使用在频繁操作的列上。
		
	八、【ALTER TABLE 命令】用于添加，修改，删除一张已经存在表的列。也可以用 ALTER TABLE 命令添加和删除约束。	
		用 ALTER TABLE 在一张已存在的表上添加列的语法如下：
			ALTER TABLE table_name ADD column_name datatype;
		在一张已存在的表上 DROP COLUMN（删除列），语法如下：
			ALTER TABLE table_name DROP COLUMN column_name;
		修改表中某列的 DATA TYPE（数据类型），语法如下：
			ALTER TABLE table_name ALTER COLUMN column_name TYPE datatype;
		给表中某列添加 NOT NULL 约束，语法如下：
			ALTER TABLE table_name MODIFY column_name datatype NOT NULL;
		给表中某列 ADD UNIQUE CONSTRAINT（ 添加 UNIQUE 约束），语法如下：
			ALTER TABLE table_name
			ADD CONSTRAINT MyUniqueConstraint UNIQUE(column1, column2...);
		给表中 ADD CHECK CONSTRAINT（添加 CHECK 约束），语法如下：
			ALTER TABLE table_name
			ADD CONSTRAINT MyUniqueConstraint CHECK (CONDITION);
		给表 ADD PRIMARY KEY（添加主键），语法如下：
			ALTER TABLE table_name
			ADD CONSTRAINT MyPrimaryKey PRIMARY KEY (column1, column2...);
		DROP CONSTRAINT （删除约束），语法如下：
			ALTER TABLE table_name
			DROP CONSTRAINT MyUniqueConstraint;
		如果是 MYSQL ，代码是这样：
			ALTER TABLE table_name
			DROP INDEX MyUniqueConstraint;
		DROP PRIMARY KEY （删除主键），语法如下：
			ALTER TABLE table_name
			DROP CONSTRAINT MyPrimaryKey;
		如果是 MYSQL ，代码是这样：
			ALTER TABLE table_name
			DROP PRIMARY KEY;
		
		具体示例：
			ALTER TABLE COMPANY ADD GENDER char(1); #增加一个字段
			ALTER TABLE COMPANY DROP GENDER; #删除一个字段
			
	
	九、【TRUNCATE TABLE】 用于删除表的数据，但不删除表结构。
		也可以用 DROP TABLE 删除表，但是这个命令会连表的结构一起删除，如果想插入数据，需要重新建立这张表。
		TRUNCATE TABLE 与 DELETE 具有相同的效果，但是由于它实际上并不扫描表，所以速度更快。 此外，TRUNCATE TABLE 可以立即释放表空间，而不需要后续 VACUUM 操作，这在大型表上非常有用。
		PostgreSQL中 VACUUM 操作用于释放、再利用更新/删除行所占据的磁盘空间。
		具体示例：
			TRUNCATE TABLE COMPANY;
		结果：
		SELECT * FROM CUSTOMERS;
		 id | name | age | address | salary
		----+------+-----+---------+--------
		(0 rows)
	
	十、【View（视图）】
		View（视图）是一张假表，只不过是通过相关的名称存储在数据库中的一个 PostgreSQL 语句。
		View（视图）实际上是一个以预定义的 PostgreSQL 查询形式存在的表的组合。
		View（视图）可以包含一个表的所有行或从一个或多个表选定行。
		View（视图）可以从一个或多个表创建，这取决于要创建视图的 PostgreSQL 查询。
		View（视图）是一种虚拟表，允许用户实现以下几点：
			用户或用户组认为更自然或直观查找结构数据的方式。
			限制数据访问，用户只能看到有限的数据，而不是完整的表。
			汇总各种表中的数据，用于生成报告。
		PostgreSQL 视图是只读的，因此可能无法在视图上执行 DELETE、INSERT 或 UPDATE 语句。但是可以在视图上创建一个触发器，当尝试 DELETE、INSERT 或 UPDATE 视图时触发，需要做的动作在触发器内容中定义。
		用 CREATE VIEW 语句创建视图，视图创建可以从一张表，多张表或者其他视图。
			CREATE VIEW COMPANY_VIEW AS
			SELECT ID, NAME, AGE
			FROM  COMPANY;
		现在，可以查询 COMPANY_VIEW，与查询实际表的方式类似。下面是实例：
			runoobdb# SELECT * FROM COMPANY_VIEW;
		删除视图：
			DROP VIEW view_name;
	
	十一、【事务】
		RANSACTION（事务）是数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。
		数据库事务通常包含了一个序列的对数据库的读/写操作。包含有以下两个目的：
		为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。
		当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。
		当事务被提交给了数据库管理系统（DBMS），则 DBMS 需要确保该事务中的所有操作都成功完成且其结果被永久保存在数据库中，
		如果事务中有的操作没有成功完成，则事务中的所有操作都需要回滚，回到事务执行前的状态；
		同时，该事务对数据库或者其他事务的执行无影响，所有的事务都好像在独立的运行。
		
		BEGIN TRANSACTION：开始一个事务。
		COMMIT：事务确认，或者可以使用 END TRANSACTION 命令。
		ROLLBACK：事务回滚。
	
		具体示例：
			回滚的事务：
			BEGIN;
			DELETE FROM COMPANY WHERE AGE = 25;
			ROLLBACK;
			
			提交的事务：
			BEGIN;
			DELETE FROM COMPANY WHERE AGE = 25;
			COMMIT;
	
	十二、【锁】
		锁主要是为了保持数据库数据的一致性，可以阻止用户修改一行或整个表，一般用在并发较高的数据库中。
		在多个用户访问数据库的时候若对并发操作不加控制就可能会读取和存储不正确的数据，破坏数据库的一致性。
		数据库中有两种基本的锁：排它锁（Exclusive Locks）和共享锁（Share Locks）。
		如果数据对象加上排它锁，则其他的事务不能对它读取和修改。
		如果加上共享锁，则该数据库对象可以被其他事务读取，但不能修改。
		
		LOCK 命令基础语法如下：
		LOCK [ TABLE ]
		name
		 IN
		lock_mode
		name：要锁定的现有表的名称（可选模式限定）。如果只在表名之前指定，则只锁定该表。如果未指定，则锁定该表及其所有子表（如果有）。
		lock_mode：锁定模式指定该锁与哪个锁冲突。如果没有指定锁定模式，则使用限制最大的访问独占模式。
		可能的值是：ACCESS SHARE，ROW SHARE， ROW EXCLUSIVE， SHARE UPDATE EXCLUSIVE， SHARE，SHARE ROW EXCLUSIVE，EXCLUSIVE，ACCESS EXCLUSIVE。
		
		一旦获得了锁，锁将在当前事务的其余时间保持。没有解锁表命令；锁总是在事务结束时释放。
		死锁：当两个事务彼此等待对方完成其操作时，可能会发生死锁。尽管 PostgreSQL 可以检测它们并以回滚结束它们，但死锁仍然很不方便。为了防止应用程序遇到这个问题，请确保将应用程序设计为以相同的顺序锁定对象。
		咨询锁：PostgreSQL 提供了创建具有应用程序定义含义的锁的方法。这些被称为咨询锁。由于系统不强制使用它们，所以正确使用它们取决于应用程序。咨询锁对于不适合 MVCC 模型的锁定策略非常有用。
		例如，咨询锁的一个常见用途是模拟所谓"平面文件"数据管理系统中典型的悲观锁定策略。虽然存储在表中的标志可以用于相同的目的，但是通知锁更快，避免了表膨胀，并且在会话结束时由服务器自动清理。
		
		具体示例：
			下面的示例将 runoobdb 数据库中的 COMPANY 表锁定为 ACCESS EXCLUSIVE 模式。（LOCK 语句只在事务模式下工作）
				BEGIN;
				LOCK TABLE company1 IN ACCESS EXCLUSIVE MODE;		
	
	十三、【子查询】
		子查询或称为内部查询、嵌套查询，指的是在 PostgreSQL 查询中的 WHERE 子句中嵌入查询语句。
		一个 SELECT 语句的查询结果能够作为另一个语句的输入值。
		子查询可以与 SELECT、INSERT、UPDATE 和 DELETE 语句一起使用，并可使用运算符如 =、<、>、>=、<=、IN、BETWEEN 等。
		以下是子查询必须遵循的几个规则：
			子查询必须用括号括起来。
			子查询在 SELECT 子句中只能有一个列，除非在主查询中有多列，与子查询的所选列进行比较。
			ORDER BY 不能用在子查询中，虽然主查询可以使用 ORDER BY。可以在子查询中使用 GROUP BY，功能与 ORDER BY 相同。
			子查询返回多于一行，只能与多值运算符一起使用，如 IN 运算符。
			BETWEEN 运算符不能与子查询一起使用，但是，BETWEEN 可在子查询内使用。
		子查询分别在增删改查中的用法：
		1、SELECT 语句中的子查询使用，基本语法如下：
				SELECT column_name [, column_name ]
				FROM   table1 [, table2 ]
				WHERE  column_name OPERATOR
					  (SELECT column_name [, column_name ]
					  FROM table1 [, table2 ]
					  [WHERE])
			具体示例：
				SELECT * FROM COMPANY WHERE ID IN (SELECT ID FROM COMPANY  WHERE SALARY > 45000) ;
		2、INSERT 语句中的子查询使用，基本语法如下：
				INSERT INTO table_name [ (column1 [, column2 ]) ]
				   SELECT [ *|column1 [, column2 ] ]
				   FROM table1 [, table2 ]
				   [ WHERE VALUE OPERATOR ]
			具体示例：
				INSERT INTO COMPANY_BKP SELECT * FROM COMPANY  WHERE ID IN (SELECT ID FROM COMPANY) ;
		3、UPDATE 语句中的子查询使用，基本语法如下：
				UPDATE table
				SET column_name = new_value
				[ WHERE OPERATOR [ VALUE ]
				   (SELECT COLUMN_NAME
				   FROM TABLE_NAME)
				   [ WHERE) ]
			具体示例：
				UPDATE COMPANY SET SALARY = SALARY * 0.50 WHERE AGE IN (SELECT AGE FROM COMPANY_BKP WHERE AGE >= 27 );
		4、DELETE 语句中的子查询使用，基本语法如下：
				DELETE FROM TABLE_NAME
				[ WHERE OPERATOR [ VALUE ]
				   (SELECT COLUMN_NAME
				   FROM TABLE_NAME)
				   [ WHERE) ]
			具体示例：
				DELETE FROM COMPANY WHERE AGE IN (SELECT AGE FROM COMPANY_BKP WHERE AGE > 27 );
	
	十四、【AUTO INCREMENT（自动增长）】AUTO INCREMENT（自动增长） 会在新记录插入表中时生成一个唯一的数字。
		PostgreSQL 使用序列来标识字段的自增长，数据类型有 smallserial、serial 和 bigserial 。
			SMALLSERIAL	2字节	1 到 32,767
			SERIAL		4字节	1 到 2,147,483,647
			BIGSERIAL	8字节	1 到 922,337,2036,854,775,807
		使用 MySQL 设置自动增长的语句如下:
			CREATE TABLE IF NOT EXISTS `runoob_tbl`(
			   `runoob_id` INT UNSIGNED AUTO_INCREMENT,
			   `runoob_title` VARCHAR(100) NOT NULL,
			   `runoob_author` VARCHAR(40) NOT NULL,
			   `submission_date` DATE,
			   PRIMARY KEY ( `runoob_id` )
			)ENGINE=InnoDB DEFAULT CHARSET=utf8;
		MySQL 是用 AUTO_INCREMENT 这个属性来标识字段的自增。
		PostgreSQL 使用序列来标识字段的自增长：
			CREATE TABLE runoob
			(
				id serial NOT NULL,
				alttext text,
				imgurl text
			)
		具体示例：
			runoobdb=# CREATE TABLE COMPANY(
			   ID  SERIAL PRIMARY KEY,
			   NAME           TEXT      NOT NULL,
			   AGE            INT       NOT NULL,
			   ADDRESS        CHAR(50),
			   SALARY         REAL
			);
		
	十五、【PRIVILEGES（权限）】无论何时创建数据库对象，都会为其分配一个所有者，所有者通常是执行 create 语句的人。
		对于大多数类型的对象，初始状态是只有所有者(或超级用户)才能修改或删除对象。要允许其他角色或用户使用它，必须为该用户设置权限。
		在 PostgreSQL 中，权限分为以下几种：SELECT、INSERT、UPDATE、DELETE、TRUNCATE、REFERENCES、TRIGGER、CREATE、CONNECT、TEMPORARY、EXECUTE、USAGE
		要向用户分配权限，可以使用 GRANT 命令。
			GRANT privilege [, ...]
			ON object [, ...]
			TO { PUBLIC | GROUP group | username }
		privilege − 值可以为：SELECT，INSERT，UPDATE，DELETE， RULE，ALL。
		object − 要授予访问权限的对象名称。可能的对象有： table， view，sequence。
		PUBLIC − 表示所有用户。
		GROUP group − 为用户组授予权限。
		username − 要授予权限的用户名。PUBLIC 是代表所有用户的简短形式。
		
		另外，我们可以使用 REVOKE 命令取消权限，REVOKE 语法：
			REVOKE privilege [, ...]
			ON object [, ...]
			FROM { PUBLIC | GROUP groupname | username }
		具体示例：
			为了理解权限，创建一个用户：
				CREATE USER runoob WITH PASSWORD 'password';
			现在给用户 "runoob" 分配权限：把COMPANY的所有权限都分配给用户runoob
				GRANT ALL ON COMPANY TO runoob;
			下面撤销用户 "runoob" 的权限：
				REVOKE ALL ON COMPANY FROM runoob;
			你也可以删除用户：
				DROP USER runoob;
	
	十六、【存储过程（也叫函数）】
			
	
	
	
	
	十七、【日期、时间】
		
		
		
	十八、【常用函数】
		1、下面是所有通用 PostgreSQL 内置函数的列表：
			COUNT 函数：用于计算数据库表中的行数。
			MAX 函数：用于查询某一特定列中最大值。
			MIN 函数：用于查询某一特定列中最小值。
			AVG 函数：用于计算某一特定列中平均值。
			SUM 函数：用于计算数字列所有值的总和。
			ARRAY 函数：用于输入值(包括null)添加到数组中。
			Numeric 函数：完整列出一个 SQL 中所需的操作数的函数。
			String 函数：完整列出一个 SQL 中所需的操作字符的函数。
		2、下面是 PostgreSQL 中提供的字符串操作符列表：
			string 丨丨 string	text	字串连接	'Post' 丨丨 'greSQL'	PostgreSQL
			bit_length(string)	int	字串里二进制位的个数	bit_length('jose')	32
			char_length(string)	int	字串中的字符个数	char_length('jose')	4
			convert(string using conversion_name)	text	使用指定的转换名字改变编码。	convert('PostgreSQL' using iso_8859_1_to_utf8)	'PostgreSQL'
			lower(string)	text	把字串转化为小写	lower('TOM')	tom
			octet_length(string)	int	字串中的字节数	octet_length('jose')	4
			overlay(string placing string from int [for int])	text	替换子字串	overlay('Txxxxas' placing 'hom' from 2 for 4)	Thomas
			position(substring in string)	int	指定的子字串的位置	position('om' in 'Thomas')	3
			substring(string [from int] [for int])	text	抽取子字串	substring('Thomas' from 2 for 3)	hom
			substring(string from pattern)	text	抽取匹配 POSIX 正则表达式的子字串	substring('Thomas' from '…$')	mas
			substring(string from pattern for escape)	text	抽取匹配SQL正则表达式的子字串	substring('Thomas' from '%#"o_a#"_' for '#')	oma
			trim([leading丨trailing 丨 both] [characters] from string)	text	从字串string的开头/结尾/两边/ 删除只包含characters(默认是一个空白)的最长的字串	trim(both 'x' from 'xTomxx')	Tom
			upper(string)	text	把字串转化为大写。	upper('tom')	TOM
			ascii(text)	int	参数第一个字符的ASCII码	ascii('x')	120
			btrim(string text [, characters text])	text	从string开头和结尾删除只包含在characters里(默认是空白)的字符的最长字串	btrim('xyxtrimyyx','xy')	trim
			chr(int)	text	给出ASCII码的字符	chr(65)	A
			convert(string text, [src_encoding name,] dest_encoding name)	text	把字串转换为dest_encoding	convert( 'text_in_utf8', 'UTF8', 'LATIN1')	以ISO 8859-1编码表示的text_in_utf8
			initcap(text)	text	把每个单词的第一个子母转为大写，其它的保留小写。单词是一系列字母数字组成的字符，用非字母数字分隔。	initcap('hi thomas')	Hi Thomas
			length(string text)	int	string中字符的数目	length('jose')	4
			lpad(string text, length int [, fill text])	text	通过填充字符fill(默认为空白)，把string填充为长度length。 如果string已经比length长则将其截断(在右边)。	lpad('hi', 5, 'xy')	xyxhi
			ltrim(string text [, characters text])	text	从字串string的开头删除只包含characters(默认是一个空白)的最长的字串。	ltrim('zzzytrim','xyz')	trim
			md5(string text)	text	计算给出string的MD5散列，以十六进制返回结果。	md5('abc')	
			repeat(string text, number int)	text	重复string number次。	repeat('Pg', 4)	PgPgPgPg
			replace(string text, from text, to text)	text	把字串string里出现地所有子字串from替换成子字串to。	replace('abcdefabcdef', 'cd', 'XX')	abXXefabXXef
			rpad(string text, length int [, fill text])	text	通过填充字符fill(默认为空白)，把string填充为长度length。如果string已经比length长则将其截断。	rpad('hi', 5, 'xy')	hixyx
			rtrim(string text [, character text])	text	从字串string的结尾删除只包含character(默认是个空白)的最长的字	rtrim('trimxxxx','x')	trim
			split_part(string text, delimiter text, field int)	text	根据delimiter分隔string返回生成的第field个子字串(1 Base)。	split_part('abc~@~def~@~ghi', '~@~', 2)	def
			strpos(string, substring)	text	声明的子字串的位置。	strpos('high','ig')	2
			substr(string, from [, count])	text	抽取子字串。	substr('alphabet', 3, 2)	ph
			to_ascii(text [, encoding])	text	把text从其它编码转换为ASCII。	to_ascii('Karel')	Karel
			to_hex(number int/bigint)	text	把number转换成其对应地十六进制表现形式。	to_hex(9223372036854775807)	7fffffffffffffff
			translate(string text, from text, to text)	text	把在string中包含的任何匹配from中的字符的字符转化为对应的在to中的字符。	translate('12345', '14', 'ax')	a23x5
		3、类型转换相关函数
		4、。。。。。
			。。。。
	
	
	
	
	
