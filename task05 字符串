1. 无重复字符的最长子串
"""
https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/

给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。

示例1

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例2

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例3

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
"""
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if not s:return 0
        left = 0
        lookup = set()#定义一个集合用来存储不重复的字符
        n = len(s)
        max_len = 0
        cur_len = 0
        for i in range(n):
            cur_len += 1
            while s[i] in lookup:#当新进入的字符已在lookup中存在时，从窗口左侧删除字符，
            #直到lookup中不存在新进入的字符s[i]为止
                lookup.remove(s[left])
                left += 1
                cur_len -= 1
            if cur_len > max_len:max_len = cur_len
            lookup.add(s[i]) 
        return max_len
        
执行用时 :
64 ms
, 在所有 Python3 提交中击败了
85.83%
的用户
内存消耗 :
13.3 MB
, 在所有 Python3 提交中击败了
34.20%
的用户
        
2. 串联所有单词的子串

https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/

给定一个字符串s和一些长度相同的单词 words。找出 s 中恰好可以由 words 中所有单词串联形成的子串的起始位置。

注意子串要与 words 中的单词完全匹配，中间不能有其他字符，但不需要考虑 words 中单词串联的顺序。

示例1

输入：
  s = "barfoothefoobarman",
  words = ["foo","bar"]
输出：[0,9]
解释：
从索引 0 和 9 开始的子串分别是 "barfoo" 和 "foobar" 。输出的顺序不重要, [9,0] 也是有效答案。
示例2

输入：
  s = "wordgoodgoodgoodbestword",
  words = ["word","good","best","word"]
输出：[]

class Solution:
    def findSubstring(self, s: str, words: List[str]) -> List[int]:
        from collections import Counter
        if not s or not words:return []
        one_word = len(words[0])
        word_num = len(words)
        n = len(s)
        words = Counter(words)
        res = []
        for i in range(0, one_word):
            cur_cnt = 0
            left = i
            right = i
            cur_Counter = Counter()
            while right + one_word <= n:
                w = s[right:right + one_word]
                right += one_word
                cur_Counter[w] += 1
                cur_cnt += 1
                while cur_Counter[w] > words[w]:
                    left_w = s[left:left+one_word]
                    left += one_word
                    cur_Counter[left_w] -= 1
                    cur_cnt -= 1
                if cur_cnt == word_num :
                    res.append(left)
        return res
执行用时 :
172 ms
, 在所有 Python3 提交中击败了
75.76%
的用户
内存消耗 :
13.2 MB
, 在所有 Python3 提交中击败了
72.24%
的用户


3. 替换子串得到平衡字符串

https://leetcode-cn.com/problems/replace-the-substring-for-balanced-string/

有一个只含有'Q', 'W', 'E','R'四种字符，且长度为 n的字符串。假如在该字符串中，这四个字符都恰好出现n/4次，那么它就是一个「平衡字符串」。

给你一个这样的字符串 s，请通过「替换一个子串」的方式，使原字符串 s变成一个「平衡字符串」。你可以用和「待替换子串」长度相同的任何其他字符串来完成替换。

请返回待替换子串的最小可能长度。

如果原字符串自身就是一个平衡字符串，则返回 0。

示例1：

输入：s = "QWER"
输出：0
解释：s 已经是平衡的了。
示例2：

输入：s = "QQWE"
输出：1
解释：我们需要把一个 'Q' 替换成 'R'，这样得到的 "RQWE" (或 "QRWE") 是平衡的。
示例3：

输入：s = "QQQW"
输出：2
解释：我们可以把前面的 "QQ" 替换成 "ER"。 
示例4：

输入：s = "QQQQ"
输出：3
解释：我们可以替换后 3 个 'Q'，使 s = "QWER"。

"""
分析：思路：
1、统计字符个数
2、只考虑大于n // 4的字符，目标找到最短的子串将这些多的字符替换掉。
3、窗口中s[l,r]就是子串candidate:
1）如果子串里包含了足够多要替换的字符，则l += 1， 缩小考察范围；
2）如果子串里需要换掉的字符不够，则r += 1，考察更多的字符；
举个栗子：
‘WQWRQQQW’
1、统计字典为counter = {W:3,Q:4,R:1}
2、只考虑出现次数大于 n // 4 = 2的字母：counter = {W:3,Q:4}，即多余的字符counter
3、我们的目标是把字符串中多余的字母替换掉，即使得 counter_balanced = {W:2,Q:2,E:2,R:2}
4、开始时 l = r = 0，此时s[l,r] = 'W',那么此子串不足以将W和Q替换完，所以我们继续考察后面的字符串，r += 1
5、到了r = 4时，此时s[l,r] = 'WQWRQ'，那么可替换掉的W有两个，Q有两个，对比counter_balanced和counter
我们可以知道，其实我们只需要换掉一个W和两个Q。此时我们可以考虑缩小考察范围，以获得最小的子串，l += 1
6、直到l = 1时，此时s[l,r] = 'QWRQ'，我们就可以更新最小子串的长度。
7、当l移动到一定程度的时候，子串里的字母又不够替换了，此时我们再移动r。长此以往，就能得到最短替换子串了。
"""

class Solution:
    def balancedString(self, s: str) -> int:
        n = len(s)
        b = n // 4 #取商
        from collections import Counter
        counter = Counter(s)
        counter = {key:value for key,value in counter.items() if value > b}#只考虑大于n // 4的字符，目标找到最短的子串将这些多的字符替换掉
        
        if not counter or n < 4:
            return 0
        rmove = True #TRUE表示r在向右移动，False表示l再向右移动
        
        l,r = 0,0
        minlen = n
        
        while l <= r and r < n:
            if s[r] in counter and rmove:
                counter[s[r]] -= 1
            elif l > 0 and s[l - 1] in counter and not rmove:
                counter[s[l - 1]] += 1

            if {key:value for key,value in counter.items() if value > b}:#表示多余的字符counter还没空
                r += 1
                rmove = True
            else:#表示多余的字符counter已经空了
                minlen = min(minlen, r - l + 1)#在历史最小和当前窗口长度中选最小
                l += 1#左指针右移缩小窗口
                rmove = False
                         
        return minlen

执行用时 :
412 ms
, 在所有 Python3 提交中击败了
40.67%
的用户
内存消耗 :
14 MB
, 在所有 Python3 提交中击败了
100.00%
的用户
